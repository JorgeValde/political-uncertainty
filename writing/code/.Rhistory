WB = 10 #willingness to pay parameter
al = .5 #alpha
obj <- function(B) {
B0 <- B[1]
Bp5 <- B[2]
Bnp5 <- B[3]
-10*((1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 + .5 - Bnp5))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 + .5 - Bnp5)))*(1-1/(1+exp(.5 - .5 - Bp5))) + (1/(1+exp(.5 + .5 - Bnp5)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 - B0))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1/(1+exp(.5 + .5 - Bnp5)))) + B0 + Bp5 + Bnp5
}
#optim function minimizes 'obj'; c vector are starting values; lower is the
#constraint; I choose a null gradient because it was easiest to get up and running
optim(c(0.01,0.01,0.01),obj,gr=NULL,method = "L-BFGS-B", lower = c(0,0,0))
X = - al + 1.930073       #these are shorthand variables for the exponents
Y = .5 - al + 1.430073   #in the logistic CDFs; I don't use them in the function
Z = -.5 - al + 0.000000         #but I've pasted in values her
WB = 5 #willingness to pay parameter
al = .5 #alpha
#the objective function with a negative sign since optim in a minimizer
obj <- function(B) {
B0 <- B[1]
Bp5 <- B[2]
Bnp5 <- B[3]
-10*((1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 + .5 - Bnp5))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 + .5 - Bnp5)))*(1-1/(1+exp(.5 - .5 - Bp5))) + (1/(1+exp(.5 + .5 - Bnp5)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 - B0))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1/(1+exp(.5 + .5 - Bnp5)))) + B0 + Bp5 + Bnp5
}
#optim function minimizes 'obj'; c vector are starting values; lower is the
#constraint; I choose a null gradient because it was easiest to get up and running
optim(c(0.01,0.01,0.01),obj,gr=NULL,method = "L-BFGS-B", lower = c(0,0,0))
X = - al + 1.930073       #these are shorthand variables for the exponents
Y = .5 - al + 1.430073   #in the logistic CDFs; I don't use them in the function
Z = -.5 - al + 0.000000         #but I've pasted in values here to check
obj <- function(B) {
B0 <- B[1]
Bp5 <- B[2]
Bnp5 <- B[3]
-WB*((1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 + .5 - Bnp5))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 + .5 - Bnp5)))*(1-1/(1+exp(.5 - .5 - Bp5))) + (1/(1+exp(.5 + .5 - Bnp5)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 - B0))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1/(1+exp(.5 + .5 - Bnp5)))) + B0 + Bp5 + Bnp5
}
#optim function minimizes 'obj'; c vector are starting values; lower is the
#constraint; I choose a null gradient because it was easiest to get up and running
optim(c(0.01,0.01,0.01),obj,gr=NULL,method = "L-BFGS-B", lower = c(0,0,0))
X = - al + 1.930073       #these are shorthand variables for the exponents
Y = .5 - al + 1.430073   #in the logistic CDFs; I don't use them in the function
Z = -.5 - al + 0.000000         #but I've pasted in values here to check
$par
par
optim$par
optim$par[]
print(optim$par)
optim$par[1]
optim
optim$
q
optim$par()[1]
optim$par()
optim$par()[[]]
optim$par()[[1]]
WB = 7 #willingness to pay parameter
al = .5 #alpha
#the objective function with a negative sign since optim in a minimizer
obj <- function(B) {
B0 <- B[1]
Bp5 <- B[2]
Bnp5 <- B[3]
-WB*((1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 + .5 - Bnp5))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 + .5 - Bnp5)))*(1-1/(1+exp(.5 - .5 - Bp5))) + (1/(1+exp(.5 + .5 - Bnp5)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 - B0))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1/(1+exp(.5 + .5 - Bnp5)))) + B0 + Bp5 + Bnp5
}
#optim function minimizes 'obj'; c vector are starting values; lower is the
#constraint; I choose a null gradient because it was easiest to get up and running
optim(c(0.01,0.01,0.01),obj,gr=NULL,method = "L-BFGS-B", lower = c(0,0,0))
WB = 8 #willingness to pay parameter
al = .5 #alpha
#the objective function with a negative sign since optim in a minimizer
obj <- function(B) {
B0 <- B[1]
Bp5 <- B[2]
Bnp5 <- B[3]
-WB*((1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 + .5 - Bnp5))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 + .5 - Bnp5)))*(1-1/(1+exp(.5 - .5 - Bp5))) + (1/(1+exp(.5 + .5 - Bnp5)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 - B0))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1/(1+exp(.5 + .5 - Bnp5)))) + B0 + Bp5 + Bnp5
}
#optim function minimizes 'obj'; c vector are starting values; lower is the
#constraint; I choose a null gradient because it was easiest to get up and running
optim(c(0.01,0.01,0.01),obj,gr=NULL,method = "L-BFGS-B", lower = c(0,0,0))
WB = 9 #willingness to pay parameter
al = .5 #alpha
#the objective function with a negative sign since optim in a minimizer
obj <- function(B) {
B0 <- B[1]
Bp5 <- B[2]
Bnp5 <- B[3]
-WB*((1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 + .5 - Bnp5))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 + .5 - Bnp5)))*(1-1/(1+exp(.5 - .5 - Bp5))) + (1/(1+exp(.5 + .5 - Bnp5)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 - B0))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1/(1+exp(.5 + .5 - Bnp5)))) + B0 + Bp5 + Bnp5
}
#optim function minimizes 'obj'; c vector are starting values; lower is the
#constraint; I choose a null gradient because it was easiest to get up and running
optim(c(0.01,0.01,0.01),obj,gr=NULL,method = "L-BFGS-B", lower = c(0,0,0))
X = - al + 1.697997       #these are shorthand variables for the exponents
Y = .5 - al + 1.198011   #in the logistic CDFs; I don't use them in the function
Z = -.5 - al + 0.000000         #but I've pasted in values here to check
X = - al + 1.930073       #these are shorthand variables for the exponents
Y = .5 - al + 1.430073   #in the logistic CDFs; I don't use them in the function
Z = -.5 - al + 0.000000         #but I've pasted in values here to check
WB = 8.5 #willingness to pay parameter
al = .5 #alpha
#the objective function with a negative sign since optim in a minimizer
obj <- function(B) {
B0 <- B[1]
Bp5 <- B[2]
Bnp5 <- B[3]
-WB*((1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 + .5 - Bnp5))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 + .5 - Bnp5)))*(1-1/(1+exp(.5 - .5 - Bp5))) + (1/(1+exp(.5 + .5 - Bnp5)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 - B0))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1/(1+exp(.5 + .5 - Bnp5)))) + B0 + Bp5 + Bnp5
}
#optim function minimizes 'obj'; c vector are starting values; lower is the
#constraint; I choose a null gradient because it was easiest to get up and running
optim(c(0.01,0.01,0.01),obj,gr=NULL,method = "L-BFGS-B", lower = c(0,0,0))
X = - al + 1.543208        #these are shorthand variables for the exponents
Y = .5 - al + 1.043209   #in the logistic CDFs; I don't use them in the function
Z = -.5 - al + 0.000000
WB = 8.2 #willingness to pay parameter
al = .5 #alpha
#the objective function with a negative sign since optim in a minimizer
obj <- function(B) {
B0 <- B[1]
Bp5 <- B[2]
Bnp5 <- B[3]
-WB*((1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 + .5 - Bnp5))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 + .5 - Bnp5)))*(1-1/(1+exp(.5 - .5 - Bp5))) + (1/(1+exp(.5 + .5 - Bnp5)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 - B0))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1/(1+exp(.5 + .5 - Bnp5)))) + B0 + Bp5 + Bnp5
}
#optim function minimizes 'obj'; c vector are starting values; lower is the
#constraint; I choose a null gradient because it was easiest to get up and running
optim(c(0.01,0.01,0.01),obj,gr=NULL,method = "L-BFGS-B", lower = c(0,0,0))
WB = 8.3 #willingness to pay parameter
al = .5 #alpha
#the objective function with a negative sign since optim in a minimizer
obj <- function(B) {
B0 <- B[1]
Bp5 <- B[2]
Bnp5 <- B[3]
-WB*((1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 + .5 - Bnp5))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 + .5 - Bnp5)))*(1-1/(1+exp(.5 - .5 - Bp5))) + (1/(1+exp(.5 + .5 - Bnp5)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 - B0))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1/(1+exp(.5 + .5 - Bnp5)))) + B0 + Bp5 + Bnp5
}
#optim function minimizes 'obj'; c vector are starting values; lower is the
#constraint; I choose a null gradient because it was easiest to get up and running
optim(c(0.01,0.01,0.01),obj,gr=NULL,method = "L-BFGS-B", lower = c(0,0,0))
X = - al + 1.543208        #these are shorthand variables for the exponents
Y = .5 - al + 1.043209   #in the logistic CDFs; I don't use them in the function
Z = -.5 - al + 0.000000         #but I've pasted in values here to check
WB = 8.4 #willingness to pay parameter
al = .5 #alpha
#the objective function with a negative sign since optim in a minimizer
obj <- function(B) {
B0 <- B[1]
Bp5 <- B[2]
Bnp5 <- B[3]
-WB*((1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 + .5 - Bnp5))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 + .5 - Bnp5)))*(1-1/(1+exp(.5 - .5 - Bp5))) + (1/(1+exp(.5 + .5 - Bnp5)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 - B0))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1/(1+exp(.5 + .5 - Bnp5)))) + B0 + Bp5 + Bnp5
}
#optim function minimizes 'obj'; c vector are starting values; lower is the
#constraint; I choose a null gradient because it was easiest to get up and running
optim(c(0.01,0.01,0.01),obj,gr=NULL,method = "L-BFGS-B", lower = c(0,0,0))
WB = 8.5 #willingness to pay parameter
al = .5 #alpha
#the objective function with a negative sign since optim in a minimizer
obj <- function(B) {
B0 <- B[1]
Bp5 <- B[2]
Bnp5 <- B[3]
-WB*((1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 + .5 - Bnp5))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 + .5 - Bnp5)))*(1-1/(1+exp(.5 - .5 - Bp5))) + (1/(1+exp(.5 + .5 - Bnp5)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 - B0))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1/(1+exp(.5 + .5 - Bnp5)))) + B0 + Bp5 + Bnp5
}
#optim function minimizes 'obj'; c vector are starting values; lower is the
#constraint; I choose a null gradient because it was easiest to get up and running
optim(c(0.01,0.01,0.01),obj,gr=NULL,method = "L-BFGS-B", lower = c(0,0,0))
WB = 8.45 #willingness to pay parameter
al = .5 #alpha
#the objective function with a negative sign since optim in a minimizer
obj <- function(B) {
B0 <- B[1]
Bp5 <- B[2]
Bnp5 <- B[3]
-WB*((1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 + .5 - Bnp5))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 + .5 - Bnp5)))*(1-1/(1+exp(.5 - .5 - Bp5))) + (1/(1+exp(.5 + .5 - Bnp5)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 - B0))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1/(1+exp(.5 + .5 - Bnp5)))) + B0 + Bp5 + Bnp5
}
#optim function minimizes 'obj'; c vector are starting values; lower is the
#constraint; I choose a null gradient because it was easiest to get up and running
optim(c(0.01,0.01,0.01),obj,gr=NULL,method = "L-BFGS-B", lower = c(0,0,0))
WB = 8.49 #willingness to pay parameter
al = .5 #alpha
#the objective function with a negative sign since optim in a minimizer
obj <- function(B) {
B0 <- B[1]
Bp5 <- B[2]
Bnp5 <- B[3]
-WB*((1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 + .5 - Bnp5))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 + .5 - Bnp5)))*(1-1/(1+exp(.5 - .5 - Bp5))) + (1/(1+exp(.5 + .5 - Bnp5)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 - B0))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1/(1+exp(.5 + .5 - Bnp5)))) + B0 + Bp5 + Bnp5
}
#optim function minimizes 'obj'; c vector are starting values; lower is the
#constraint; I choose a null gradient because it was easiest to get up and running
optim(c(0.01,0.01,0.01),obj,gr=NULL,method = "L-BFGS-B", lower = c(0,0,0))
X = - al + 1.539666        #these are shorthand variables for the exponents
WB = 8.48 #willingness to pay parameter
al = .5 #alpha
#the objective function with a negative sign since optim in a minimizer
obj <- function(B) {
B0 <- B[1]
Bp5 <- B[2]
Bnp5 <- B[3]
-WB*((1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 + .5 - Bnp5))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 + .5 - Bnp5)))*(1-1/(1+exp(.5 - .5 - Bp5))) + (1/(1+exp(.5 + .5 - Bnp5)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 - B0))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1/(1+exp(.5 + .5 - Bnp5)))) + B0 + Bp5 + Bnp5
}
#optim function minimizes 'obj'; c vector are starting values; lower is the
#constraint; I choose a null gradient because it was easiest to get up and running
optim(c(0.01,0.01,0.01),obj,gr=NULL,method = "L-BFGS-B", lower = c(0,0,0))
WB = 20 #willingness to pay parameter
al = .5 #alpha
#the objective function with a negative sign since optim in a minimizer
obj <- function(B) {
B0 <- B[1]
Bp5 <- B[2]
Bnp5 <- B[3]
-WB*((1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 + .5 - Bnp5))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 + .5 - Bnp5)))*(1-1/(1+exp(.5 - .5 - Bp5))) + (1/(1+exp(.5 + .5 - Bnp5)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 - B0))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1/(1+exp(.5 + .5 - Bnp5)))) + B0 + Bp5 + Bnp5
}
#optim function minimizes 'obj'; c vector are starting values; lower is the
#constraint; I choose a null gradient because it was easiest to get up and running
optim(c(0.01,0.01,0.01),obj,gr=NULL,method = "L-BFGS-B", lower = c(0,0,0))
X = - al + 1.905965        #these are shorthand variables for the exponents
Y = .5 - al + 1.405956   #in the logistic CDFs; I don't use them in the function
Z = -.5 - al + 2.406003         #but I've pasted in values here to check
WB = 4 #willingness to pay parameter
al = .5 #alpha
#the objective function with a negative sign since optim in a minimizer
obj <- function(B) {
B0 <- B[1]
Bp5 <- B[2]
Bnp5 <- B[3]
-WB*((1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 + .5 - Bnp5))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 + .5 - Bnp5)))*(1-1/(1+exp(.5 - .5 - Bp5))) + (1/(1+exp(.5 + .5 - Bnp5)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 - B0))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1/(1+exp(.5 + .5 - Bnp5)))) + B0 + Bp5 + Bnp5
}
#optim function minimizes 'obj'; c vector are starting values; lower is the
#constraint; I choose a null gradient because it was easiest to get up and running
optim(c(0.01,0.01,0.01),obj,gr=NULL,method = "L-BFGS-B", lower = c(0,0,0))
WB = 2 #willingness to pay parameter
al = .5 #alpha
#the objective function with a negative sign since optim in a minimizer
obj <- function(B) {
B0 <- B[1]
Bp5 <- B[2]
Bnp5 <- B[3]
-WB*((1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 + .5 - Bnp5))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 + .5 - Bnp5)))*(1-1/(1+exp(.5 - .5 - Bp5))) + (1/(1+exp(.5 + .5 - Bnp5)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 - B0))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1/(1+exp(.5 + .5 - Bnp5)))) + B0 + Bp5 + Bnp5
}
#optim function minimizes 'obj'; c vector are starting values; lower is the
#constraint; I choose a null gradient because it was easiest to get up and running
optim(c(0.01,0.01,0.01),obj,gr=NULL,method = "L-BFGS-B", lower = c(0,0,0))
WB = 6 #willingness to pay parameter
al = .5 #alpha
#the objective function with a negative sign since optim in a minimizer
obj <- function(B) {
B0 <- B[1]
Bp5 <- B[2]
Bnp5 <- B[3]
-WB*((1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 + .5 - Bnp5))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 + .5 - Bnp5)))*(1-1/(1+exp(.5 - .5 - Bp5))) + (1/(1+exp(.5 + .5 - Bnp5)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 - B0))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1/(1+exp(.5 + .5 - Bnp5)))) + B0 + Bp5 + Bnp5
}
#optim function minimizes 'obj'; c vector are starting values; lower is the
#constraint; I choose a null gradient because it was easiest to get up and running
optim(c(0.01,0.01,0.01),obj,gr=NULL,method = "L-BFGS-B", lower = c(0,0,0))
WB = 7 #willingness to pay parameter
al = .5 #alpha
#the objective function with a negative sign since optim in a minimizer
obj <- function(B) {
B0 <- B[1]
Bp5 <- B[2]
Bnp5 <- B[3]
-WB*((1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 + .5 - Bnp5))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 + .5 - Bnp5)))*(1-1/(1+exp(.5 - .5 - Bp5))) + (1/(1+exp(.5 + .5 - Bnp5)))*(1/(1+exp(.5 - .5 - Bp5)))*(1-1/(1+exp(.5 - B0))) + (1/(1+exp(.5 - B0)))*(1/(1+exp(.5 - .5 - Bp5)))*(1/(1+exp(.5 + .5 - Bnp5)))) + B0 + Bp5 + Bnp5
}
#optim function minimizes 'obj'; c vector are starting values; lower is the
#constraint; I choose a null gradient because it was easiest to get up and running
optim(c(0.01,0.01,0.01),obj,gr=NULL,method = "L-BFGS-B", lower = c(0,0,0))
X = - al + 1.905965        #these are shorthand variables for the exponents
Y = .5 - al + 1.405956   #in the logistic CDFs; I don't use them in the function
Z = -.5 - al + 2.406003         #but I've pasted in values here to check
